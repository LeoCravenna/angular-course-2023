import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss'],
})
export class AppComponent {
  title = 'test';

  constructor() {
    // SI HAGO FUNCIONES EN EL CONSTRUCTOR, ESTO SE VA A EJECUTAR CUANDO EL COMPONENTE SE CREE.
    // CUANDO UN COMPONENTE SE RENDERIZA EN ANGULAR EN LA PARTE DEL NAVEGADOR, PRIMERO EMPIEZA EJECUTANDO EL
    // CODIGO QUE ESTA DENTRO DEL CONSTRUCTOR.
    console.log('Hola');
  }

  // LA FUNCION SI SE LE PASA PARAMETRO, HAY QUE DECIRLE DE QUE TIPO ES Y DESPUES ANTES DEL COMIENZO DE LA LLAVE,
  // HAY QUE DECIRLE DE QUE TIPO ES LO QUE VA A RETORNAR, SI SE LE PONE ANY, SIGNIFICA QUE PUEDE SER DE CUALQUIER
  // TIPO LO QUE RETORNE, NO ESTA BIEN VISTO USARLO PARA LAS EMPRESAS.
  // DELANTE DEL NOMBRE DE LA FUNCION SE PUEDE ESPECIFICAR SI ES PUBLIC O PRIVATE, SI ES PUBLIC, SE PUEDE ACCEDER
  // DESDE EL APP.COMPONENT.HTML Y SI FUERA PRIVADO, SOLO SE PODRIA USAR DENTRO DE LA CLASS APPCOMPONENT.
  // SI A UNA VARIABLE O FUNCION NO SE LE ACLARA, POR DEFECTO ES PUBLIC.
  getName(name: string): string {
    return 'Hola' + name;
  }

  // SE USA MUCHO EN ANGULAR LOS ARROW FUNCTIONS (FUNCIONES FLECHA), SIRVE PARA QUE EL CODIGO SEA MAS CORTO.
  // LA SINTAXIS SERIA, () (PARAMETROS DE ENTRADA), => (EN VEZ DE DOS PUNTOS O LLAVES) Y
  // {} (ACA VA EL CODIGO QUE VA A EJECUTAR LA FUNCION FLECHA).
  // ADELANTE DE LOS PARAMETROS DE ENTRADA, EL NOMBRE IRIA EN UNA CONST NOMBREDELAFUNCION = Y LA SINTAXIS ANTERIOR.

  // const getName = (name: string) => {return "Hola " + name;}

  // SI LA FUNCION FLECHA RETORNA UNA SOLA LINEA DE CODIGO, SE LO COLOCA DE LA SIGUIENTE FORMA:
  // const getName = (name: string) => "Hola " + name;

  // SI LA FUNCION NO TIENE PARAMENTROS DE ENTRADA Y RETORNA UNA SOLA LINEA, SE COLOCA DE LA SIGUIENTE FORMA:
  // const getName = () => "Hola";

  // SI TENGO DOS PARAMENTROS DE ENTRADA Y RETORNA UNA SOLA LINEA, SE LO COLOCA DE LA SIGUIENTE FORMA:
  // const getName = (name: string, lasName: string) => "Hola " + name + lastName;

  // SI EL PARAMETRO DE ENTRADA ES UNO SOLO Y NO SABEMOS DE QUE TIPO ES, SE COLOCA DE LA SIGUIENTE FORMA:
  // const getName = name => "Hola " + name;
}
